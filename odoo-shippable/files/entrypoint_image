#!/usr/bin/env python

from __future__ import print_function

import os
import subprocess
import time


def docker_entrypoint():
    # Fix postgresql
    #  https://github.com/docker/docker/issues/783
    #   issuecomment-56013588
    cmds = [
        ["mkdir", "-p", "/etc/ssl/private-copy"],
        ["mkdir", "-p", "/etc/ssl/private"],
        ["mv", "/etc/ssl/private/*", "/etc/ssl/private-copy/"],
        ["rm", "-r", "/etc/ssl/private"],
        ["mv", "/etc/ssl/private-copy", "/etc/ssl/private"],
        ["chmod", "-R", "0700", "/etc/ssl/private"],
        ["chown", "-R", "postgres", "/etc/ssl/private"],
    ]
    for cmd in cmds:
        subprocess.call(' '.join(cmd), shell=True)

    # Patch to force start odoo as root
    sub_cmd1 = [
        'find', '-L', os.getenv("HOME"), '-name', 'server.py',
    ]
    subp1 = subprocess.Popen(sub_cmd1, stdout=subprocess.PIPE)
    sub_cmd2 = [
        'xargs', 'sed', '-i', "s/== 'root'/== 'force_root'/g"
    ]
    subprocess.Popen(sub_cmd2, stdin=subp1.stdout, stdout=subprocess.PIPE)

    # Start postgresql service

    psql_version = os.environ.get('PSQL_VERSION', '9.3')
    psql_vstr = psql_version.replace('.', '')
    cmd = '/etc/init.d/postgresql start {version} main{psql_version}'.format(version=psql_version, psql_version=psql_vstr)
    subprocess.call(cmd, shell=True)
    print("Waiting to start psql service...")
    count = 0
    max_count = 40
    while True:
        psql_subprocess = subprocess.Popen(
            ["psql", '-l'], stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
        psql_subprocess.wait()
        if not bool(psql_subprocess.stderr.read()) or count > max_count:
            break
        time.sleep(2)
        count += 1
    print("...psql service started.")

    # Change travis pro info from coveralls
    travis_build_dir = os.environ.get('TRAVIS_BUILD_DIR', '')
    fname_coveralls = os.path.join(travis_build_dir, '.coveralls.yml')
    coveralls_lines = []
    exists_service_name_ok = False
    if os.path.isfile(fname_coveralls):
        with open(fname_coveralls, 'r') as fcoveralls:
            for line in fcoveralls:
                if 'service_name' in line:
                    if 'travis' in line:
                        continue
                    exists_service_name_ok = True
                coveralls_lines.append(line)
    if not exists_service_name_ok:
        # TODO: Add git user.name to service_name
        coveralls_lines.append('service_name: vauxoo_container')
    open(fname_coveralls, 'w').writelines(coveralls_lines)
    return True


if __name__ == '__main__':
    docker_entrypoint()

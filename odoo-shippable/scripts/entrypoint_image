#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function

import os
import subprocess
import time
import glob


def docker_cache():
    print("Update main repo")
    git_cmd = ['git', '--git-dir=' + os.path.join(
        os.environ.get('TRAVIS_BUILD_DIR', '.'), '.git'),
    ]
    cmd = git_cmd + [
        'fetch', 'origin',
        '+refs/pull/%d/merge:' % int(os.environ.get('TRAVIS_PULL_REQUEST', 0))]
    subprocess.call(cmd)
    cmd = git_cmd + ['checkout', '-qf', os.environ.get('TRAVIS_COMMIT')]
    subprocess.call(cmd)

    # TODO: Update odoo/odoo

    print("Running oca_dependencies.")
    cmd = [os.path.expanduser(
        '~/maintainer-quality-tools/travis/clone_oca_dependencies')]
    subprocess.call(cmd)

    cmd = ['rm', '-rf', os.path.expanduser('~/.openerp_server.stats')]
    subprocess.call(cmd)

    cmd = ['coverage', 'erase']
    subprocess.call(cmd)
    return True


def docker_entrypoint():
    # Patch to force start odoo as root
    if glob.glob(os.getenv("HOME") + '/*/*/cli/server.py'):
        cmd = """sed -i "s/== 'root'/== 'force_root'/g" %s/*/*/cli/server.py""" % os.getenv("HOME")  # noqa
        subprocess.call(cmd, shell=True)

    # Start ssh service
    if os.environ.get('START_SSH', False):
        cmd = "/etc/init.d/ssh start"
        subprocess.call(cmd, shell=True)

    # Start postgresql service
    cmd = '/etc/init.d/postgresql start'
    subprocess.call(cmd, shell=True, env=os.environ)
    print("Waiting to start psql service...")
    count = 0
    max_count = 240
    while True:
        psql_subprocess = subprocess.Popen(
            ["psql", '-l'], stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
        psql_subprocess.wait()
        psql_out = psql_subprocess.stderr.read()
        if 'rol' in psql_out and 'does not exist' in psql_out:
            psql_error = False
        elif psql_out:
            psql_error = True
        else:
            psql_error = False
        if not psql_error or count > max_count:
            break
        time.sleep(3)
        count += 1
    if not psql_error:
        print("...psql service started.")
    else:
        raise RuntimeError("PSQL not started.")

    # Fix flaky error when run instance to connect more info:
    # https://www.odoo.com/es_ES/forum/ayuda-1/question/internal-error-index-10107 # noqa
    cmd = [
        'psql', 'openerp_test', '-c',
        'REINDEX INDEX ir_translation_src_hash_idx',
    ]
    try:
        popen = subprocess.Popen(
            cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if popen.wait() == 0:
            print("Reindex created: ", cmd)
    except BaseException:
        pass

    if os.environ.get('CACHE'):
        docker_cache()
    return True


if __name__ == '__main__':
    docker_entrypoint()
